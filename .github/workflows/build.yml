name: Zig-Cross-Compile

env:
  DEBUG: 'napi:*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read # 允许读取仓库内容
  actions: write # 允许上传 artifacts

on:
  push:
    branches:
      - master
    # tags:
    #   - 'v*' # 匹配 v1.0.0, v2.1.3 等版本标签
  pull_request:
    branches: [master] # 保留 PR 触发用于测试
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # macOS - Native 构建（参考 napi-rs/tar）
          - host: macos-latest
            target: x86_64-apple-darwin
            build: pnpm build --target x86_64-apple-darwin
            test: pnpm test
          - host: macos-latest
            target: aarch64-apple-darwin
            build: pnpm build --target aarch64-apple-darwin
            test: pnpm test

          # Linux - 使用 Zig 交叉编译（类似 napi-rs/tar 但保持 Zig 优势）
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: pnpm build --target x86_64-unknown-linux-gnu --cross-compile --use-cross
            test: pnpm test
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: pnpm build --target aarch64-unknown-linux-gnu --cross-compile --use-cross
            test: '' # ARM64 交叉编译不直接测试
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: pnpm build --target x86_64-unknown-linux-musl --cross-compile --use-cross
            test: '' # musl 交叉编译不直接测试
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: pnpm build --target aarch64-unknown-linux-musl --cross-compile --use-cross
            test: ''

    name: Build (${{ matrix.settings.target }})
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      # macOS 特定设置
      - name: Setup Rust (macOS)
        if: runner.os == 'macOS'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      # Linux 特定设置 (保持 Zig 交叉编译)
      - name: Setup Rust (Linux)
        if: runner.os == 'Linux'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Setup Zig (Linux only)
        if: runner.os == 'Linux'
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0

      - name: Install cross-compilation tools (Linux)
        if: runner.os == 'Linux'
        run: |
          cargo install cargo-zigbuild --version 0.18.6

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.settings.target }}-cargo-cache-v3
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      # macOS SDK 设置（仅 Linux 交叉编译需要）
      - name: Install macOS SDK (Linux cross-compile)
        if: runner.os == 'Linux' && contains(matrix.settings.target, 'apple')
        run: |
          curl -L "https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz" | tar -J -x -C /opt

      # QEMU 设置（仅 Linux 需要）
      - name: Setup QEMU (Linux only)
        if: runner.os == 'Linux'
        run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      # 执行平台特定的构建命令
      - name: Build native addon
        env:
          SDKROOT: /opt/MacOSX11.3.sdk
        run: |
          echo "=== Building for target: ${{ matrix.settings.target }} ==="
          echo "Host OS: ${{ runner.os }}"
          echo "Build command: ${{ matrix.settings.build }}"

          # 执行构建
          ${{ matrix.settings.build }}

      - name: List and verify generated files
        run: |
          echo "Built files for target: ${{ matrix.settings.target }}"
          ls -la *.node || echo "No .node files found"
          ls -la index.* || echo "No index files found"
          echo "File details:"
          find . -name "*.node" -exec file {} \;

      # 运行测试（仅在支持的情况下）
      - name: Test native addon
        if: matrix.settings.test != ''
        run: |
          echo "Running tests for ${{ matrix.settings.target }}"
          ${{ matrix.settings.test }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.settings.target }}
          path: |
            *.node
            index.js
            index.d.ts
          retention-days: 30

  # 专门测试交叉编译的 ARM 架构（需要 Docker/QEMU）
  test-cross-compiled:
    name: Test Cross-compiled ARM64
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: aarch64-unknown-linux-gnu
            docker-platform: arm64
          - target: aarch64-unknown-linux-musl
            docker-platform: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Download artifacts first
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.settings.target }}
          path: ./

      - name: Install dependencies (after downloading artifacts)
        run: |
          # Force clean install to avoid npm optional dependencies bug
          rm -rf node_modules package-lock.json pnpm-lock.yaml || true
          pnpm install --no-frozen-lockfile
        if: matrix.settings.docker-platform == null

      - name: List files
        run: |
          echo "Downloaded artifacts for target: ${{ matrix.settings.target }}"
          ls -la *.node || echo "No .node files found"
          ls -la index.* || echo "No index files found"
          echo "Checking file contents..."
          find . -name "*.node" -exec file {} \;

      # 原生环境测试（Windows, macOS）
      # - name: Test native
      #   run: CI=true pnpm exec mocha test/test.js --timeout 10000 --reporter spec
      #   if: matrix.settings.docker-platform == null && matrix.settings.host != 'ubuntu-latest'

      # Linux x64 原生测试
      - name: List Linux x64 files only
        run: |
          echo "Built Linux target: ${{ matrix.settings.target }}"
          echo "Current environment:"
          uname -a
          ldd --version | head -1
          echo "Available .node files:"
          ls -la *.node || echo "No .node files found"
          echo "Node.js version:"
          node --version
          echo "Skipping tests, only listing files..."
          # CI=true pnpm exec mocha test/test.js --timeout 10000 --reporter spec
        if: matrix.settings.target == 'x86_64-unknown-linux-gnu' || matrix.settings.target == 'x86_64-unknown-linux-musl'

      # ARM64 Docker 测试
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: matrix.settings.docker-platform != null

      - name: List ARM64 files with Docker
        uses: addnab/docker-run-action@v3
        if: matrix.settings.docker-platform != null
        with:
          image: node:22-alpine
          options: --platform linux/${{ matrix.settings.docker-platform }} -v ${{ github.workspace }}:/build -w /build
          run: |
            echo "Built target: ${{ matrix.settings.target }} on platform: ${{ matrix.settings.docker-platform }}"
            ls -la *.node || echo "No .node files found in workspace"
            apk add --no-cache file
            echo "Files after checking workspace:"
            ls -la *.node || echo "No .node files found"
            find . -name "*.node" -exec file {} \; || echo "No .node files to analyze"
            echo "Skipping tests, only listing files..."
            # CI=true pnpm exec mocha test/test.js --timeout 10000 --reporter spec

  # 最终状态检查
  zig-cross-compile-done:
    runs-on: ubuntu-latest
    needs:
      - build
      - test-cross-compiled
    if: always()
    steps:
      - name: Check all jobs succeeded
        run: |
          echo "=== Build and Test Results ==="
          echo "Build result: ${{ needs.build.result }}"
          echo "Cross-compiled test result: ${{ needs.test-cross-compiled.result }}"

          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build failed"
            exit 1
          fi

          if [[ "${{ needs.test-cross-compiled.result }}" != "success" ]]; then
            echo "⚠️ Cross-compiled tests failed, but continuing..."
          fi

          echo "✅ All critical jobs completed successfully"
