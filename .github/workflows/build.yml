name: Zig-Cross-Compile

env:
  DEBUG: 'napi:*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  release:
    types: [published]

jobs:
  build:
    name: Zig
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          [
            'aarch64-apple-darwin',
            'x86_64-apple-darwin',
            'x86_64-unknown-linux-musl',
            'aarch64-unknown-linux-musl',
            'x86_64-unknown-linux-gnu',
            'aarch64-unknown-linux-gnu',
            'x86_64-pc-windows-msvc',
            'aarch64-pc-windows-msvc',
          ]

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: stable-zig-${{ matrix.target }}-cargo-cache-v2

      - name: Install ziglang
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0

      - name: Install cargo-zigbuild and cargo-xwin
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-zigbuild,cargo-xwin
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: install MacOS SDK
        if: contains(matrix.target, 'apple')
        run: |
          curl -L "https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz" | tar -J -x -C /opt

      - name: install Windows msvc tools
        if: contains(matrix.target, 'windows')
        run: |
          sudo apt update
          sudo apt install -y lld llvm

      - name: Cross build native addon
        env:
          SDKROOT: /opt/MacOSX11.3.sdk
        run: |
          pnpm exec napi build --target ${{ matrix.target }} --platform --release --cross-compile

      - name: List and verify generated files
        run: |
          echo "Built files for target: ${{ matrix.target }}"
          ls -la *.node || echo "No .node files found"
          ls -la index.* || echo "No index files found"
          echo "File details:"
          find . -name "*.node" -exec file {} \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            *.node
            index.js
            index.d.ts
          retention-days: 30

  # 测试交叉编译结果
  test:
    name: Test Zig Cross Compiled ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - host: macos-latest
            target: aarch64-apple-darwin
          - host: macos-15
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            target: aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker-platform: arm64
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker-platform: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Download artifacts first
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.settings.target }}
          path: ./

      - name: Install dependencies (after downloading artifacts)
        run: |
          # Force clean install to avoid npm optional dependencies bug
          rm -rf node_modules package-lock.json pnpm-lock.yaml || true
          pnpm install --no-frozen-lockfile
        if: matrix.settings.docker-platform == null

      - name: List files
        run: |
          echo "Downloaded artifacts for target: ${{ matrix.settings.target }}"
          ls -la *.node || echo "No .node files found"
          ls -la index.* || echo "No index files found"
          echo "Checking file contents..."
          find . -name "*.node" -exec file {} \;

      # 原生环境测试（Windows, macOS）
      - name: Test native
        run: pnpm test
        if: matrix.settings.docker-platform == null && matrix.settings.host != 'ubuntu-latest'

      # Linux x64 原生测试
      - name: Test Linux x64 native
        run: |
          echo "Testing Linux target: ${{ matrix.settings.target }}"
          echo "Current environment:"
          uname -a
          ldd --version | head -1
          echo "Available .node files:"
          ls -la *.node || echo "No .node files found"
          echo "Node.js version:"
          node --version
          echo "Starting test..."
          pnpm test
        if: matrix.settings.target == 'x86_64-unknown-linux-gnu' || matrix.settings.target == 'x86_64-unknown-linux-musl'

      # ARM64 Docker 测试
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: matrix.settings.docker-platform != null

      - name: Test ARM64 with Docker
        uses: addnab/docker-run-action@v3
        if: matrix.settings.docker-platform != null
        with:
          image: node:22-alpine
          options: --platform linux/${{ matrix.settings.docker-platform }} -v ${{ github.workspace }}:/build -w /build
          run: |
            echo "Testing target: ${{ matrix.settings.target }} on platform: ${{ matrix.settings.docker-platform }}"
            ls -la *.node || echo "No .node files found in workspace"
            apk add --no-cache pnpm file
            # Clean install to avoid npm optional dependencies issues
            rm -rf node_modules package-lock.json pnpm-lock.yaml || true
            pnpm install --no-frozen-lockfile
            echo "Files after npm install:"
            ls -la *.node || echo "No .node files found after install"
            pnpm test

  # 最终状态检查
  zig-cross-compile-done:
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - name: Check all jobs succeeded
        run: exit 1
        if: ${{ always() && (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
