name: Publish to npm

on:
  release:
    types: [published]
  workflow_run:
    workflows: ['Zig-Cross-Compile']
    types: [completed]
    branches: [main, master]

jobs:
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Download all build artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // 获取 workflow run 的 artifacts
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });

            console.log(`Found ${artifacts.data.artifacts.length} artifacts`);

            // 下载每个 artifact
            for (const artifact of artifacts.data.artifacts) {
              console.log(`Downloading artifact: ${artifact.name}`);
              
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip',
              });
              
              // 创建 artifacts 目录
              const artifactsDir = path.join(process.env.GITHUB_WORKSPACE, 'artifacts');
              if (!fs.existsSync(artifactsDir)) {
                fs.mkdirSync(artifactsDir, { recursive: true });
              }
              
              // 保存并解压 artifact
              const zipPath = path.join(artifactsDir, `${artifact.name}.zip`);
              fs.writeFileSync(zipPath, Buffer.from(download.data));
              
              // 解压到平台命名的目录
              const extractPath = path.join(artifactsDir, artifact.name);
              if (!fs.existsSync(extractPath)) {
                fs.mkdirSync(extractPath, { recursive: true });
              }
              
              // 使用 unzip 命令解压
              const { execSync } = require('child_process');
              try {
                execSync(`cd "${artifactsDir}" && unzip -o "${artifact.name}.zip" -d "${artifact.name}"`);
                console.log(`Successfully extracted ${artifact.name}`);
              } catch (error) {
                console.error(`Failed to extract ${artifact.name}:`, error.message);
              }
            }

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -la artifacts/
          echo ""
          echo "Content of each artifact:"
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              echo "=== $(basename "$dir") ==="
              ls -la "$dir"
              echo ""
            fi
          done

      - name: Prepare for publishing
        run: |
          # 使用 napi 预发布脚本准备平台包
          pnpm run prepublishOnly

          # 创建 npm 目录结构
          mkdir -p npm

          # 复制构建的 artifacts 到对应位置
          for artifact_dir in artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              platform_name=$(basename "$artifact_dir")
              echo "Processing platform: $platform_name"
              
              # 如果有 .node 文件，复制到 npm 目录
              if ls "$artifact_dir"/*.node 1> /dev/null 2>&1; then
                echo "Found .node file for $platform_name"
                mkdir -p "npm/$platform_name"
                cp "$artifact_dir"/*.node "npm/$platform_name/"
                
                # 检查是否有 index.js 和 index.d.ts
                if [ -f "$artifact_dir/index.js" ]; then
                  cp "$artifact_dir/index.js" "npm/$platform_name/"
                fi
                if [ -f "$artifact_dir/index.d.ts" ]; then
                  cp "$artifact_dir/index.d.ts" "npm/$platform_name/"
                fi
                
                echo "Prepared package for $platform_name"
              else
                echo "No .node file found for $platform_name"
              fi
            fi
          done

          echo "Prepared packages:"
          ls -la npm/

      - name: Publish to npm
        run: |
          # 发布主包和平台包
          echo "Publishing packages..."

          # 如果是 release 事件，发布到 npm
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "Publishing release to npm..."
            pnpm publish --access public
          else
            echo "Not a release event, skipping npm publish"
            echo "Event: ${{ github.event_name }}"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
