name: Zig-Cross-Compile

env:
  DEBUG: 'napi:*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write # GitHub Release 需要
  actions: write # artifacts 需要
  id-token: write # npm 发布需要

on:
  push:
    tags:
      - 'v*' # 匹配 v1.0.0, v2.1.3 等版本标签
  pull_request:
    branches: [main, master] # 保留 PR 触发用于测试
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    name: Build Native Modules
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [
            'aarch64-apple-darwin',
            'x86_64-apple-darwin',
            'x86_64-unknown-linux-musl',
            'aarch64-unknown-linux-musl',
            'x86_64-unknown-linux-gnu',
            'aarch64-unknown-linux-gnu',
            # 'x86_64-pc-windows-msvc',
            # 'aarch64-pc-windows-msvc',
          ]

    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: stable-zig-${{ matrix.target }}-cargo-cache-v2

      - name: Install ziglang
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0

      - name: Install cargo-zigbuild and cargo-xwin
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-zigbuild,cargo-xwin
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: install MacOS SDK
        if: contains(matrix.target, 'apple')
        run: |
          sudo mkdir -p /opt
          curl -L "https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz" | sudo tar -J -x -C /opt
          ls -la /opt/ | grep -i macos || echo "SDK extraction may have failed"

      # - name: install Windows msvc tools
      #   if: contains(matrix.target, 'windows')
      #   run: |
      #     sudo apt update
      #     sudo apt install -y lld llvm

      - name: Cross build native addon
        env:
          SDKROOT: /opt/MacOSX11.3.sdk
        run: |
          pnpm exec napi build --target ${{ matrix.target }} --platform --release --cross-compile

      - name: List and verify generated files
        run: |
          echo "Built files for target: ${{ matrix.target }}"
          ls -la *.node || echo "No .node files found"
          ls -la index.* || echo "No index files found"
          echo "File details:"
          find . -name "*.node" -exec file {} \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: success() && hashFiles('*.node') != ''
        with:
          name: ${{ matrix.target }}
          path: |
            *.node
            index.js
            index.d.ts
          retention-days: 30

  # 测试交叉编译结果
  test:
    name: Test Zig Cross Compiled ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - host: macos-latest
            target: aarch64-apple-darwin
          - host: macos-15
            target: x86_64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker-platform: arm64
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker-platform: arm64
          # - host: windows-latest
          #   target: x86_64-pc-windows-msvc
          # - host: windows-latest
          #   target: aarch64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.settings.target }}
          path: ./

      - name: Install dependencies
        run: |
          pnpm install --no-frozen-lockfile
        if: matrix.settings.docker-platform == null

      - name: List files
        run: |
          echo "Downloaded artifacts for target: ${{ matrix.settings.target }}"
          ls -la *.node || echo "No .node files found"
          ls -la index.* || echo "No index files found"
          find . -name "*.node" -exec file {} \;

      # 原生环境测试（Windows, macOS）
      # - name: Test native
      # run: CI=true pnpm exec mocha test/test.js --timeout 10000 --reporter spec
      # if: matrix.settings.docker-platform == null && matrix.settings.host != 'ubuntu-latest'

      # Linux x64 原生测试
      - name: List Linux x64 files only
        run: |
          echo "Built Linux target: ${{ matrix.settings.target }}"
          echo "Current environment:"
          uname -a
          ldd --version | head -1
          echo "Available .node files:"
          ls -la *.node || echo "No .node files found"
          echo "Node.js version:"
          node --version
          echo "Skipping tests, only listing files..."
          # CI=true pnpm exec mocha test/test.js --timeout 10000 --reporter spec
        if: matrix.settings.target == 'x86_64-unknown-linux-gnu' || matrix.settings.target == 'x86_64-unknown-linux-musl'

      # ARM64 Docker 测试
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: matrix.settings.docker-platform != null

      - name: List ARM64 files with Docker
        uses: addnab/docker-run-action@v3
        if: matrix.settings.docker-platform != null
        with:
          image: node:22-alpine
          options: --platform linux/${{ matrix.settings.docker-platform }} -v ${{ github.workspace }}:/build -w /build
          run: |
            echo "Built target: ${{ matrix.settings.target }} on platform: ${{ matrix.settings.docker-platform }}"
            ls -la *.node || echo "No .node files found"
            apk add --no-cache file
            find . -name "*.node" -exec file {} \; || echo "No .node files to analyze"
            echo "Skipping tests, only listing files..."
            # CI=true pnpm exec mocha test/test.js --timeout 10000 --reporter spec

  # 准备发布包
  prepare:
    name: Prepare Release Packages
    runs-on: ubuntu-latest
    needs:
      - test
    if: ${{ needs.test.result == 'success' && startsWith(github.ref, 'refs/tags/v') }}
    outputs:
      npm-dirs: ${{ steps.create-npm-dirs.outputs.dirs }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create npm package structure
        id: create-npm-dirs
        run: |
          pnpm exec napi prepublish -t npm
          echo "dirs=$(ls -1 npm/ | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT

      - name: Upload npm packages as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: npm-packages
          path: npm/
          retention-days: 30

  # 发布到 GitHub Release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - prepare
    if: ${{ needs.prepare.result == 'success' && startsWith(github.ref, 'refs/tags/v') }}

    steps:
      - uses: actions/checkout@v4

      - name: Download npm packages
        uses: actions/download-artifact@v4
        with:
          name: npm-packages
          path: npm/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 bsdiff-rust ${{ github.ref_name }}

            ### 📦 Native Binaries
            Precompiled native binaries for multiple platforms.

            ### 📥 Installation
            ```bash
            npm install bsdiff-rust@${{ github.ref_name }}
            ```

            ### 🖥️ Supported Platforms
            - macOS (x64, ARM64)
            - Linux (x64, ARM64, glibc/musl)
            - Windows (x64, ARM64) - Coming soon
          files: npm/**/*.node
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 发布到 npm
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs:
      - prepare
    if: ${{ needs.prepare.result == 'success' && startsWith(github.ref, 'refs/tags/v') }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install

      - name: Download npm packages
        uses: actions/download-artifact@v4
        with:
          name: npm-packages
          path: npm/

      - name: Publish main package
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
